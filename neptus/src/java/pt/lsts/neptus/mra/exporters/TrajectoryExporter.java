/*
 * Copyright (c) 2004-2021 Universidade do Porto - Faculdade de Engenharia
 * Laboratório de Sistemas e Tecnologia Subaquática (LSTS)
 * All rights reserved.
 * Rua Dr. Roberto Frias s/n, sala I203, 4200-465 Porto, Portugal
 *
 * This file is part of Neptus, Command and Control Framework.
 *
 * Commercial Licence Usage
 * Licencees holding valid commercial Neptus licences may use this file
 * in accordance with the commercial licence agreement provided with the
 * Software or, alternatively, in accordance with the terms contained in a
 * written agreement between you and Universidade do Porto. For licensing
 * terms, conditions, and further information contact lsts@fe.up.pt.
 *
 * Modified European Union Public Licence - EUPL v.1.1 Usage
 * Alternatively, this file may be used under the terms of the Modified EUPL,
 * Version 1.1 only (the "Licence"), appearing in the file LICENSE.md
 * included in the packaging of this file. You may not use this work
 * except in compliance with the Licence. Unless required by applicable
 * law or agreed to in writing, software distributed under the Licence is
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the Licence for the specific
 * language governing permissions and limitations at
 * https://github.com/LSTS/neptus/blob/develop/LICENSE.md
 * and http://ec.europa.eu/idabc/eupl.html.
 *
 * For more information please see <http://lsts.fe.up.pt/neptus>.
 *
 * Author: zp
 * Jan 7, 2016
 */
package pt.lsts.neptus.mra.exporters;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;

import javax.swing.ProgressMonitor;

import pt.lsts.imc.EstimatedState;
import pt.lsts.neptus.NeptusLog;
import pt.lsts.neptus.comm.IMCUtils;
import pt.lsts.neptus.i18n.I18n;
import pt.lsts.neptus.mp.SystemPositionAndAttitude;
import pt.lsts.neptus.mp.preview.SimulationEngine;
import pt.lsts.neptus.mra.importers.IMraLogGroup;
import pt.lsts.neptus.plugins.PluginDescription;
import pt.lsts.neptus.types.coord.LocationType;
import pt.lsts.neptus.types.mission.MissionType;
import pt.lsts.neptus.types.mission.plan.PlanType;
import pt.lsts.neptus.util.llf.LogUtils;

/**
 * This plug-in is used to export two CSV files from a log where some plan was executed.
 *  - simulated_traj.csv will have the trajectory generated by Neptus simulators
 *  - executed_traj.csv will have the trajectory actually executed by the vehicle
 * The aim is then to compare and validate the Neptus simulation.
 * 
 * @author zp
 */
@PluginDescription(name="Trajectory Exporter", experimental=true, description="Generate simulated and executed trajectories (format requested by Vinayak Prabhu)")
public class TrajectoryExporter implements MRAExporter {

    @Override
    public boolean canBeApplied(IMraLogGroup source) {
        return source.getLsfIndex().containsMessagesOfType("PlanSpecification");
    }

    @Override
    public String process(IMraLogGroup source, ProgressMonitor pmonitor) {
        if (pmonitor != null) {
            pmonitor.setNote(I18n.text("Parsing Mission"));
            pmonitor.setProgress(5);
        }
        MissionType mt = LogUtils.generateMission(source);
        if (pmonitor != null) {
            pmonitor.setNote(I18n.text("Parsing Plan"));
            pmonitor.setProgress(10);
        }
        PlanType plan = LogUtils.generatePlan(mt, source);
        if (plan == null) {
            String error = I18n.text("Parsing return null plan");
            if (pmonitor != null) {
                pmonitor.setNote(error);
                pmonitor.setProgress(100);
            }
            return error;
        }

        if (pmonitor != null) {
            pmonitor.setNote(I18n.text("Parsing Initial State"));
            pmonitor.setProgress(20);
        }
        EstimatedState estate = source.getLsfIndex().getFirst(EstimatedState.class);
        double startTime = estate.getTimestamp();
        SystemPositionAndAttitude state = IMCUtils.parseState(estate);
        state.getPosition().setOffsetDown(0);
        LocationType zero = new LocationType(state.getPosition());
        zero.convertToAbsoluteLatLonDepth();
        NeptusLog.pub().debug(String.format("First position allZ=%f  depth=%s", zero.getAllZ(), zero.getDepth()));
        if (pmonitor != null) {
            pmonitor.setNote(I18n.text("Simulating execution"));
            pmonitor.setProgress(25);
        }
        SimulationEngine engine = new SimulationEngine(plan);
        engine.setState(state);
        double ellapsedTime = 0;
        try {
            try (BufferedWriter simWriter = new BufferedWriter(new FileWriter(new File(source.getFile("mra"), "simulated_traj.csv")))) {
                simWriter.write("Time,X,Y,Z\n");
                while (!engine.isFinished()) {
                    SystemPositionAndAttitude pos = engine.getState();
                    double[] offsets = pos.getPosition().getOffsetFrom(zero);
                    String line = ellapsedTime + "," + offsets[0] + "," + offsets[1] + "," + pos.getDepth();
                    simWriter.write(line + "\n");
                    engine.simulationStep();
                    ellapsedTime += engine.getTimestep();
                }
            }
            catch (Exception e) {
                throw e;
            }

            if (pmonitor != null) {
                pmonitor.setNote(I18n.text("Exporting real execution"));
                pmonitor.setProgress(50);
            }
            try (BufferedWriter execWriter = new BufferedWriter(new FileWriter(new File(source.getFile("mra"), "executed_traj.csv")))) {
                execWriter.write("Time,X,Y,Z\n");

                for (EstimatedState es : source.getLsfIndex().getIterator(EstimatedState.class)) {
                    LocationType loc = IMCUtils.getLocation(es);
                    double[] offsets = loc.getOffsetFrom(zero);
                    String line = (es.getTimestamp() - startTime) + "," + offsets[0] + "," + offsets[1] + "," + loc.getDepth();
                    execWriter.write(line + "\n");
                }

                if (pmonitor != null) {
                    pmonitor.setNote(I18n.text("Done"));
                    pmonitor.setProgress(100);
                }
            }
            catch (Exception e) {
                throw e;
            }
        }
        catch (Exception e) {
            e.printStackTrace();
            return I18n.textf("Error: %s", ""+e.getMessage());
        }
        if (pmonitor != null) {
            pmonitor.close();
        }
        return I18n.text("Export process complete.");
    }
}
